/**
 * Title: "Comptine d’un autre été : L’après-midi"
 * Original composer: Yann Tiersen (2001)
 *
 * Copyright / Usage Notice:
 * - This file contains a non-commercial study/arrangement of the above work.
 * - All rights in the original composition remain with the respective rightsholders.
 * - No original recordings are included; this code only generates synthesized notes/patterns.
 * - Use is limited to private/educational purposes. Public performance, distribution,
 *   or commercial use may require permission/licensing from the rightsholders
 *   (e.g., publisher/collecting society).
 *
 * Credits (this arrangement):
 * - Programming/Arrangement: Tristan Cebulla (2025)
 * - Tools: Strudel (Tidal-style live coding in JS)
 *
 * Code License
 * - MIT License. Music rights unaffected.
 *
 * Contact:
 * - strudel+comptine@lichtspiele.org
 */

// Settings 
const tempo = 100             // 100 (integer) - original tempo (quarter notes per minute)
const scale_str = 'e3:minor'  // e3:minor (string - use single quotes!) - original scale

// Helper: shift root scale up/down in octaves
function transposeScale(scale, octShift = 1) {
  return scale.replace(/([a-g][b#]?)(\d+)/, (m, note, oct) => note + (parseInt(oct) + octShift))
}

/**
 * Why setcps(tempo/60/4)?
 * - The piece is written in clear 4-bar phrases.
 * - Mapping 1 cycle = 4 bars means every <…> block corresponds to one phrase.
 * - Multipliers like *8 refine subdivisions inside those 4 bars
 */
setcps(tempo/60/4)
const scale = seq(scale_str)

$piano: stack(
  // left hand
  "<1@52 2@1 0@2>".pickRestart([
    silence,
    stack(
      "<0@1 1@3>".pick(["7", "6"]).struct("<x ~ x ~ x ~ x ~>*8").gain("<.7 .4 .4 .4>*4"),
      "<0@3 1@1>".pick(["4", "3"]).struct("<~ x ~ x ~ x ~ x>*8").gain(.7),
      "<0@2 1@2>".pick(["2", "1"]).struct("<~ x ~ x>*4").gain(.6),
      "<0@1 1@3>".pick(["0", "-1"]).struct("<x ~ x ~>*4").gain(.7)
    ),
    stack(
      n("<0>"),
      n("<~ 4@31>*32"),
      n("<~!2 7@30>*32"),
      n("<~!3 9@29>*32")
    ).gain(".4")
  ])
  .scale(scale)
  .velocity(.6).sustain(.7).pan(.25),
  // right hand
  "<0@4 1@8 2@4 3@4 4@3 5@1 4@3 6@1 1@8 2@4 3@4 4@3 5@1 4@3 7@1 8@1 0@2>".pickRestart([
    silence,
    n(`<~ [2 1] 2 [4 5] 4@4 
        ~ [1 2] 1 [2 3] 2@4 
        ~ [1 0] 1 [4 5] 4@4 
        ~ [1 0] 1@6>*8`),
    n("<7@3 4@5 6@3 4@5 8@3 4@5 8@3 3@5>*8"),
    stack(
      n(`<9@3 7@5 9@3 6@5 8@3 6@5 8@3 6@5>*8`),
      n(`<4@3 2@5 4@3 2@5 4@3 1@5 3@3 1@5>*8`)
    ),
    n(`<4 7 11 4 7 11 4 7 11 4 7 11 4 7 5 7
        4 6 11 4 6 11 4 6 11 4 6 11 4 6 3 6
        1 4 6 1 4 6 1 4 6 1 4 6 1 4 2 4>*16`),
    n("<3 6 10 3 6 10 3 6 10 3 6 10 3 6 2 6>*16"),
    n("<3 6 10 3 6 10 3 6 10 3 6 10 3 6 10@2>*16"),
    n("<3 6 10 3 6 10 3 6 10 3 6 10 3 6 10 9>*16"),
    stack(
      n("<~!4 0@28>*32"),
      n("<~!5 2@27>*32"),
      n("<~!6 4@26>*32")
    )
  ])
  .scale(transposeScale(scale_str))
  .transpose("<0@28 12@25 0@2>") // transpose 2nd part one octave up
  .gain(1).velocity(.8).sustain(.4).pan(.75)
)
.s("piano")
.room(.7).rsize(5)
._pianoroll({ labels: 1 })

/* Tempo adjustment */
all(x => x.cps(
  seq(tempo).sub(
    "<0@27 1@1 0@23 2@1 0@3>".pickRestart([
      "0", run(16).slow(1), run(70).slow(1)
    ])
  ).div(60*4)
))
